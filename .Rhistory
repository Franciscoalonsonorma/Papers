getwd()
<<<<<<< HEAD
setwd("C:/Users/Vicente/OneDrive/Documentos/projects/migracion/Papers")
getwd()
d <- read.csv("BaseEVES.csv", stringsAsFactors = FALSE, fileEncoding="latin1")  ## latin1 sirve para leer los acentos
library(foreign)
library(stargazer)
library(MASS)
library(survival)
library(car)
library(devtools)
install.packages("devtools")
library(devtools)
library(lattice)
library(Hmisc)
library(pastecs)
library(ineq)
library(plyr)
library(tibble)
library(data.table)
library(readstata13)
install.packages("readstata13")
library(readstata13)
library(dummies)
install.packages("dummies")
library(dummies)
library(data.table)
d$idmun <- recode(d$idmun, "7121=121")
d$idmun <- recode(d$idmun, "7120=120")
pobalimentaria2000 <- read.csv("~/pobalimentaria2000.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding="latin1")  ## latin1 sirve para leer los acentos
pobalimentaria2000 <- read.csv("pobalimentaria2000.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding="latin1")  ## latin1 sirve para leer los acentos
pobalimentaria2000 <- rename(pobalimentaria2000, replace =
c("pobalimentaria2000" = "pobalimentaria"))
pobalimentaria2000 <- rename(pobalimentaria2000, replace =
c("Clave.del.municipio" = "idedomun")) # cambiar el nombre del identificador
pobalimentaria2000$pobalimentaria <- as.numeric(pobalimentaria2000$pobalimentaria)
pobalimentaria2000$year <- 2000 # aniadimos el anio para el que vamos a juntar la base
pobalimentaria2000 <- subset(pobalimentaria2000, select = -c(Municipio) )  # tiramos la variable municipio
pobalimentaria2010 <- read.csv("pobalimentaria2010.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding="latin1")
pobalimentaria2010 <- rename(pobalimentaria2010, replace =
c("Clave.del.municipio" = "idedomun"))
pobalimentaria2010<- subset(pobalimentaria2010, select = -c(Municipio)) # tiramos Municipio
pobalimentaria2010$year <- 2010
pobalimentaria <- rbind(pobalimentaria2000, pobalimentaria2010)
||||||| merged common ancestors
setwd("C:/Users/Vicente/OneDrive/Documentos/projects/migracion/Papers")
=======
setwd('~/Documents/projects/migration')
library(foreign)
library(stargazer)
library(MASS)
library(survival)
library(car)
library(devtools)
install.packages("stargazer"): #hace tablas de regresion y descriptivas
# install.packages("foreign"): #reads non-R files
# install.packages("MASS"): #functions and econometric models
# install.packages("dummies") #creates dummies
# install.packages("dummy")
# adapt my Rprofile.site to contain the following line,
# making my default library path a directory not included in my R installation:
#.libPaths(c("/usr/lib/R/library",.libPaths()))
# Other library path: ‘/home/sandra/R/x86_64-pc-linux-gnu-library/3.4’:
# install.packages("survival") #survival analysis
# install.packages("car") # companion to applied regression
# hay un problema con el car, dice :"Error, failed to lock directory"
# para solucionarlo voy a tratar
# install.packages("car", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
install.packages("devtools")
install.packages("stargazer")
library(devtools)
install.packages("stargazer"): #hace tablas de regresion y descriptivas
# install.packages("foreign"): #reads non-R files
# install.packages("MASS"): #functions and econometric models
# install.packages("dummies") #creates dummies
# install.packages("dummy")
# adapt my Rprofile.site to contain the following line,
# making my default library path a directory not included in my R installation:
#.libPaths(c("/usr/lib/R/library",.libPaths()))
# Other library path: ‘/home/sandra/R/x86_64-pc-linux-gnu-library/3.4’:
# install.packages("survival") #survival analysis
# install.packages("car") # companion to applied regression
# hay un problema con el car, dice :"Error, failed to lock directory"
# para solucionarlo voy a tratar
# install.packages("car", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
install.packages("devtools")
install.packages("devtools", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
install.packages("stargazer"): #hace tablas de regresion y descriptivas
# install.packages("foreign"): #reads non-R files
# install.packages("MASS"): #functions and econometric models
# install.packages("dummies") #creates dummies
# install.packages("dummy")
# adapt my Rprofile.site to contain the following line,
# making my default library path a directory not included in my R installation:
#.libPaths(c("/usr/lib/R/library",.libPaths()))
# Other library path: ‘/home/sandra/R/x86_64-pc-linux-gnu-library/3.4’:
# install.packages("survival") #survival analysis
# install.packages("car") # companion to applied regression
# hay un problema con el car, dice :"Error, failed to lock directory"
# para solucionarlo voy a tratar
# install.packages("car", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
install.packages("devtools")
install.packages("stargazer"): #hace tablas de regresion y descriptivas
# install.packages("foreign"): #reads non-R files
# install.packages("MASS"): #functions and econometric models
# install.packages("dummies") #creates dummies
# install.packages("dummy")
# adapt my Rprofile.site to contain the following line,
# making my default library path a directory not included in my R installation:
#.libPaths(c("/usr/lib/R/library",.libPaths()))
# Other library path: ‘/home/sandra/R/x86_64-pc-linux-gnu-library/3.4’:
# install.packages("survival") #survival analysis
# install.packages("car") # companion to applied regression
# hay un problema con el car, dice :"Error, failed to lock directory"
# para solucionarlo voy a tratar
# install.packages("car", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
install.packages("devtools")
install.packages('openssl')
install.packages('curl')
install.packages("libcurl4-openssl-dev")
install.packages('curl')
install.packages("libcurl4-openssl-dev")
library(lattice)
library(Hmisc)
library(pastecs)
library(ineq)
library(plyr)
library(tibble)
library(data.table)
library(readstata13)
library(dummies)
install.packages("readstata13")
library(dummies)
library(readstata13)
install.packages("dummies")
library(dummies)
library(data.table)
>>>>>>> e428ec7d7c66f2adaaa202b4e57a8244edf781f8
d <- read.csv("BaseEVES.csv", stringsAsFactors = FALSE, fileEncoding="latin1")  ## latin1 sirve para leer los acentos
<<<<<<< HEAD
d <- as_tibble(d)
d <- merge(d, pobalimentaria, by=c("idedomun","year"), all=TRUE)
illit2000 <- read.csv("analfabeta2000.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding="latin1")  ## latin1 sirve para leer los acentos
str(illit2000) # hay que crear una proporcion de gente que sabe leer y escribir.
illit2000$illit <- illit2000$No.sabe.leer.y.escribir / illit2000$Total # aqui esta la proporcion
stat.desc(illit2000)
illit2000 <- rename(illit2000, replace =
c("Clave" = "idedomun")) # cambiar el nombre del identificador
illit2000$year <- 2000 # aniadimos el anio para el que vamos a juntar la base
illit2000 <- subset(illit2000, select = -c(Nombre, Total,
Sabe.leer.y.escribir, No.sabe.leer.y.escribir) )  # tiramos varias variables
illit2010 <- read.csv("analfabeta2010.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding="latin1")
str(illit2010)
illit2010 <- rename(illit2010, replace =
c("Clave" = "idedomun"))
illit2010$illit <- illit2010$No.sabe.leer.y.escribir / illit2010$Total
illit2010<- subset(illit2010, select = c(idedomun, illit)) # tiramos vars
illit2010$year <- 2010
illit <- rbind(illit2000, illit2010)
d <- merge(d, illit, by=c("idedomun","year"), all=TRUE)
d$poverty <- d$illit * d$pobalimentaria
stat.desc(d$poverty)
summary(d$poverty)
wosec2000 <- read.csv("pobbasiced2000.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding="latin1")
summary(wosec2000)
wosec2000$wosec <- as.numeric(wosec2000$ratebasiced)
wosec2000 <- subset(wosec2000, select = -c(Nombre, ratebasiced))
wosec2000 <- rename(wosec2000, replace = c("Clave" = "idedomun") )
wosec2000$year <- 2000
wosec2010 <- read.csv("pobbasiced2010.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding = "latin1")
wosec2010 <- rename(wosec2010, replace = c("Clave" = "idedomun"))
wosec2010 <- rename(wosec2010, replace = c("edu15delay" = "wosec"))
wosec2010$wosec <- as.numeric(wosec2010$wosec)
wosec2010$year <- 2010
wosec <- rbind(wosec2000, wosec2010)
d <- merge(d, wosec, by=c("idedomun","year"), all=TRUE)
summary(d$wosec)
gini2005 <- d$IDH_gini
summary(gini2005)
gini2000 <- read.csv("~/Tesis/BaseEVES/gini2000.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding = "latin1")
gini2000 <- read.csv("gini2000.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding = "latin1")
gini2000$gini <- as.numeric(cgini2000$gini)
gini2000$year <- 2000
gini2000$gini <- as.numeric(gini2000$gini)
gini2000$year <- 2000
summary(gini2000)
gini2010 <- read.csv("~/Tesis/BaseEVES/gini2010.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding = "latin1")
gini2010 <- read.csv("gini2010.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding = "latin1")
gini2010$year <- 2010
gini <- rbind(gini2000, gini2010)
d <- merge(d, gini, c("idedomun", "year"), all = TRUE)
IDH_ingpc <- read.csv("~/Tesis/BaseEVES/IDH_ingpc2010.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding = "latin1")
IDH_ingpc <- read.csv("IDH_ingpc2010.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding = "latin1")
IDH_ingpc <- subset(IDH_ingpc, select = c("idedomun", "IDH_ingpc"), drop = TRUE)
IDH_ingpc$year <- 2010
d$idedomuny <- paste0(d$idedomun, d$year)  # creamos un solo identificador
IDH_ingpc$idedomuny <- paste0(IDH_ingpc$idedomun, IDH_ingpc$year)
d <- data.frame(d, stringsAsFactors=FALSE) # declaramos que es un data frame
IDH_ingpc <- data.frame(IDH_ingpc, stringsAsFactors=FALSE)
swap <- IDH_ingpc$IDH_ingpc[match(d$idedomuny, IDH_ingpc$idedomuny)] # usamos match
ok <- !is.na(swap)  # creamos un ok
d$IDH_ingpc[ok] <- swap[ok]
d$loggdp <- log(d$IDH_ingpc)
stat.desc(d[,c("IDH_ingpc","loggdp")])
hist(d$IDH_ingpc, breaks = "FD", col = "green" )
hist(d$loggdp, breaks = "FD", col = "green")
ied <- read.dta13("IED.dta", convert.factors = TRUE)
d$munelect <- ifelse(is.na(d$vtotalr6), 0, 1)
d$gubelect <- ifelse(is.na(d$vtotalr7), 0, 1)
d$fedelect <- ifelse(is.na(d$vtotalr1), 0, 1)
d$munfed <- d$munelect + d$fedelect
d$fedconcur <- ifelse(d$munfed == 2, 1, 0)
d$ms <- d$munelect + d$gubelect
d$mungubconcur <- ifelse(d$ms == 2, 1, 0)
d$mgf <- d$munelect + d$gubelect + d$fedelect
d$mungubfedconcur <- ifelse(d$mgf==3,1,0)
d$munPANsq <- (d$PAN_p6)^2
d$munPRIsq <- (d$PRI_p6)^2
d$munPRDsq <- (d$PRD_p6)^2
d$munOtrossq <- (d$Otros_p6)^2
d$munENP <- 1 / (d$munPANsq + d$munPRIsq + d$munPRDsq + d$munOtrossq)
summary(d$munENP)
d$gubPANsq <- (d$PAN_p7)^2
d$gubPRIsq <- (d$PRI_p7)^2
d$gubPRDsq <- (d$PRD_p7)^2
d$gubOtrossq = (d$Otros_p7)^2
d$gubENP = 1 / (d$gubPANsq + d$gubPRIsq + d$gubPRDsq + d$gubOtrossq)
d$localcomp <- d$munENP*d$gubENP
d$localcomp2 <- (d$localcomp)^2
summary(d$localcomp)
violinegi <- read.dta13("homicidios_simbad.dta", convert.factors = TRUE)
d$horatesimbad <- (d$h*100000) / d$pob_total_est
d <- subset(d, idmun <= 570)
summary(d$idedomun)
summary(d$horatesimbad)
as_tibble(d$idedomun, d$NomMun)
head(d[,c("idedo","idedomun","NomMun","year", "h", "horatesimbad")], n = 30)
d$lag.hom <- c(NA, d$horatesimbad[-nrow(d)])
d$lag.hom[which(!duplicated(d$idedomun))] <- NA
head(d[,c("idedo","idedomun","NomMun","year", "h", "horatesimbad","lag.hom")], n = 40)
d$nonzero = 0
d$nonzero <- ifelse(d$homicidios > 0, 1, 0)
summary(d$nonzero)
d$ruralcorp = d$PRI_p6 * d$part6
summary(d[,c("ruralcorp", "PRI_p6", "part6")])
d$logpop = log(d$pob_total_est)
d$pop2 = d$pob_total_est^2
d$pop = d$pob_total_est
summary(d[, c("logpop", "pop2","pop")])
summary(d$year)
table(d$year)
d$crisis = ifelse(d$year == 1982, 1, 0)
d$crisis = ifelse(d$year == 1985, 1, 0)
d$crisis = ifelse(d$year == 1986, 1, 0)
d$crisis = ifelse(d$year == 1995, 1, 0)
d$crisis = ifelse(d$year == 2000, 1, 0)
d$crisis = ifelse(d$year == 2001, 1, 0)
d$crisis = ifelse(d$year == 2002, 1, 0)
d$crisis = ifelse(d$year == 2003, 1, 0)
d$crisis = ifelse(d$year == 2008, 1, 0)
d$crisis = ifelse(d$year == 2009, 1, 0)
d$crisis = ifelse(d$year == 2010, 1, 0)
||||||| merged common ancestors
head(d)
summary(d)
e <- subset(d,  select = c("idedomun", "year", "IDH_ingpc"))
head(e, n = 35)
head(IDH_ingpc2010)
e[match(IDH_ingpc2010$idedomun, IDH_ingpc2010$year,e$idedomun,e$year), ] <- e
summary(e)
some(e)
=======
d$idmun <- recode(d$idmun, "7121=121")
d$idmun <- recode(d$idmun, "7120=120")
d$idmun <- recode(d$idmun, "7121=121")
library(car)
d$idmun <- recode(d$idmun, "7121=121")
d$idmun <- recode(d$idmun, "7120=120")
pobalimentaria2000 <- read.csv("pobalimentaria2000.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding="latin1")  ## latin1 sirve para leer los acentos
pobalimentaria2000 <- rename(pobalimentaria2000, replace =
c("pobalimentaria2000" = "pobalimentaria"))
pobalimentaria2000 <- rename(pobalimentaria2000, replace =
c("Clave.del.municipio" = "idedomun")) # cambiar el nombre del identificador
pobalimentaria2000$pobalimentaria <- as.numeric(pobalimentaria2000$pobalimentaria)
pobalimentaria2000$year <- 2000 # aniadimos el anio para el que vamos a juntar la base
pobalimentaria2000 <- subset(pobalimentaria2000, select = -c(Municipio) )  # tiramos la variable municipio
pobalimentaria2010 <- read.csv("pobalimentaria2010.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding="latin1")
pobalimentaria2010 <- rename(pobalimentaria2010, replace =
c("Clave.del.municipio" = "idedomun"))
pobalimentaria2010<- subset(pobalimentaria2010, select = -c(Municipio)) # tiramos Municipio
pobalimentaria2010$year <- 2010
pobalimentaria <- rbind(pobalimentaria2000, pobalimentaria2010)
d <- read.csv("BaseEVES.csv", stringsAsFactors = FALSE, fileEncoding="latin1")  ## latin1 sirve para leer los acentos
d <- as_tibble(d)
d <- merge(d, pobalimentaria, by=c("idedomun","year"), all=TRUE)
illit2000 <- read.csv("analfabeta2000.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding="latin1")  ## latin1 sirve para leer los acentos
str(illit2000) # hay que crear una proporcion de gente que sabe leer y escribir.
illit2000$illit <- illit2000$No.sabe.leer.y.escribir / illit2000$Total # aqui esta la proporcion
stat.desc(illit2000)
illit2000 <- rename(illit2000, replace =
c("Clave" = "idedomun")) # cambiar el nombre del identificador
illit2000$year <- 2000 # aniadimos el anio para el que vamos a juntar la base
illit2000 <- subset(illit2000, select = -c(Nombre, Total,
Sabe.leer.y.escribir, No.sabe.leer.y.escribir) )  # tiramos varias variables
illit2010 <- read.csv("analfabeta2010.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding="latin1")
str(illit2010)
illit2010 <- rename(illit2010, replace =
c("Clave" = "idedomun"))
illit2010$illit <- illit2010$No.sabe.leer.y.escribir / illit2010$Total
illit2010<- subset(illit2010, select = c(idedomun, illit)) # tiramos vars
illit2010$year <- 2010
illit <- rbind(illit2000, illit2010)
d <- merge(d, illit, by=c("idedomun","year"), all=TRUE)
d$poverty <- d$illit * d$pobalimentaria
stat.desc(d$poverty)
summary(d$poverty)
wosec2000 <- read.csv("pobbasiced2000.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding="latin1")
summary(wosec2000)
wosec2000$wosec <- as.numeric(wosec2000$ratebasiced)
wosec2000 <- subset(wosec2000, select = -c(Nombre, ratebasiced))
wosec2000 <- rename(wosec2000, replace = c("Clave" = "idedomun") )
wosec2000$year <- 2000
wosec2010 <- read.csv("pobbasiced2010.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding = "latin1")
wosec2010 <- rename(wosec2010, replace = c("Clave" = "idedomun"))
wosec2010 <- rename(wosec2010, replace = c("edu15delay" = "wosec"))
wosec2010$wosec <- as.numeric(wosec2010$wosec)
wosec2010$year <- 2010
wosec <- rbind(wosec2000, wosec2010)
d <- merge(d, wosec, by=c("idedomun","year"), all=TRUE)
summary(d$wosec)
gini2005 <- d$IDH_gini
summary(gini2005)
gini2000 <- read.csv("gini2000.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding = "latin1")
gini2000$gini <- as.numeric(gini2000$gini)
gini2000$year <- 2000
summary(gini2000)
gini2010 <- read.csv("gini2010.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding = "latin1")
gini2010$year <- 2010
gini <- rbind(gini2000, gini2010)
d <- merge(d, gini, c("idedomun", "year"), all = TRUE)
IDH_ingpc <- read.csv("IDH_ingpc2010.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding = "latin1")
IDH_ingpc <- subset(IDH_ingpc, select = c("idedomun", "IDH_ingpc"), drop = TRUE)
IDH_ingpc$year <- 2010
d$idedomuny <- paste0(d$idedomun, d$year)  # creamos un solo identificador
IDH_ingpc$idedomuny <- paste0(IDH_ingpc$idedomun, IDH_ingpc$year)
d <- data.frame(d, stringsAsFactors=FALSE) # declaramos que es un data frame
IDH_ingpc <- data.frame(IDH_ingpc, stringsAsFactors=FALSE)
swap <- IDH_ingpc$IDH_ingpc[match(d$idedomuny, IDH_ingpc$idedomuny)] # usamos match
ok <- !is.na(swap)  # creamos un ok
d$IDH_ingpc[ok] <- swap[ok]
d$loggdp <- log(d$IDH_ingpc)
stat.desc(d[,c("IDH_ingpc","loggdp")])
hist(d$IDH_ingpc, breaks = "FD", col = "green" )
hist(d$loggdp, breaks = "FD", col = "green")
ied <- read.dta13("IED.dta", convert.factors = TRUE)
as_tibble(ied)
ied <- data.frame(ied, stringsAsFactors=FALSE)
d <- merge(d, ied, c("idedo","year"), all= TRUE)
head(d$IED)
d <- read.csv("BaseEVES.csv", stringsAsFactors = FALSE, fileEncoding="latin1")  ## latin1 sirve para leer los acentos
d <- as_tibble(d)
d <- merge(d, pobalimentaria, by=c("idedomun","year"), all=TRUE)
illit2000 <- read.csv("analfabeta2000.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding="latin1")  ## latin1 sirve para leer los acentos
str(illit2000) # hay que crear una proporcion de gente que sabe leer y escribir.
illit2000$illit <- illit2000$No.sabe.leer.y.escribir / illit2000$Total # aqui esta la proporcion
stat.desc(illit2000)
illit2000 <- rename(illit2000, replace =
c("Clave" = "idedomun")) # cambiar el nombre del identificador
illit2000$year <- 2000 # aniadimos el anio para el que vamos a juntar la base
illit2000 <- subset(illit2000, select = -c(Nombre, Total,
Sabe.leer.y.escribir, No.sabe.leer.y.escribir) )  # tiramos varias variables
illit2010 <- read.csv("analfabeta2010.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding="latin1")
str(illit2010)
illit2010 <- rename(illit2010, replace =
c("Clave" = "idedomun"))
illit2010$illit <- illit2010$No.sabe.leer.y.escribir / illit2010$Total
illit2010<- subset(illit2010, select = c(idedomun, illit)) # tiramos vars
illit2010$year <- 2010
illit <- rbind(illit2000, illit2010)
d <- merge(d, illit, by=c("idedomun","year"), all=TRUE)
d$poverty <- d$illit * d$pobalimentaria
stat.desc(d$poverty)
summary(d$poverty)
wosec2000 <- read.csv("pobbasiced2000.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding="latin1")
summary(wosec2000)
wosec2000$wosec <- as.numeric(wosec2000$ratebasiced)
wosec2000 <- subset(wosec2000, select = -c(Nombre, ratebasiced))
wosec2000 <- rename(wosec2000, replace = c("Clave" = "idedomun") )
wosec2000$year <- 2000
wosec2010 <- read.csv("pobbasiced2010.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding = "latin1")
wosec2010 <- rename(wosec2010, replace = c("Clave" = "idedomun"))
wosec2010 <- rename(wosec2010, replace = c("edu15delay" = "wosec"))
wosec2010$wosec <- as.numeric(wosec2010$wosec)
wosec2010$year <- 2010
wosec <- rbind(wosec2000, wosec2010)
d <- merge(d, wosec, by=c("idedomun","year"), all=TRUE)
summary(d$wosec)
gini2005 <- d$IDH_gini
summary(gini2005)
gini2000 <- read.csv("gini2000.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding = "latin1")
gini2000$gini <- as.numeric(gini2000$gini)
gini2000$year <- 2000
summary(gini2000)
gini2010 <- read.csv("gini2010.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding = "latin1")
gini2010$year <- 2010
gini <- rbind(gini2000, gini2010)
d <- merge(d, gini, c("idedomun", "year"), all = TRUE)
IDH_ingpc <- read.csv("IDH_ingpc2010.csv", sep = ";",
stringsAsFactors = FALSE, fileEncoding = "latin1")
IDH_ingpc <- subset(IDH_ingpc, select = c("idedomun", "IDH_ingpc"), drop = TRUE)
IDH_ingpc$year <- 2010
d$idedomuny <- paste0(d$idedomun, d$year)  # creamos un solo identificador
IDH_ingpc$idedomuny <- paste0(IDH_ingpc$idedomun, IDH_ingpc$year)
d <- data.frame(d, stringsAsFactors=FALSE) # declaramos que es un data frame
IDH_ingpc <- data.frame(IDH_ingpc, stringsAsFactors=FALSE)
swap <- IDH_ingpc$IDH_ingpc[match(d$idedomuny, IDH_ingpc$idedomuny)] # usamos match
ok <- !is.na(swap)  # creamos un ok
d$IDH_ingpc[ok] <- swap[ok]
d$loggdp <- log(d$IDH_ingpc)
stat.desc(d[,c("IDH_ingpc","loggdp")])
hist(d$IDH_ingpc, breaks = "FD", col = "green" )
hist(d$loggdp, breaks = "FD", col = "green")
ied <- read.dta13("IED.dta", convert.factors = TRUE)
d$munelect <- ifelse(is.na(d$vtotalr6), 0, 1)
d$gubelect <- ifelse(is.na(d$vtotalr7), 0, 1)
d$fedelect <- ifelse(is.na(d$vtotalr1), 0, 1)
d$munfed <- d$munelect + d$fedelect
d$fedconcur <- ifelse(d$munfed == 2, 1, 0)
d$ms <- d$munelect + d$gubelect
d$mungubconcur <- ifelse(d$ms == 2, 1, 0)
d$mgf <- d$munelect + d$gubelect + d$fedelect
d$mungubfedconcur <- ifelse(d$mgf==3,1,0)
d$munPANsq <- (d$PAN_p6)^2
d$munPRIsq <- (d$PRI_p6)^2
d$munPRDsq <- (d$PRD_p6)^2
d$munOtrossq <- (d$Otros_p6)^2
d$munENP <- 1 / (d$munPANsq + d$munPRIsq + d$munPRDsq + d$munOtrossq)
summary(d$munENP)
d$gubPANsq <- (d$PAN_p7)^2
d$gubPRIsq <- (d$PRI_p7)^2
d$gubPRDsq <- (d$PRD_p7)^2
d$gubOtrossq = (d$Otros_p7)^2
d$gubENP = 1 / (d$gubPANsq + d$gubPRIsq + d$gubPRDsq + d$gubOtrossq)
d$localcomp <- d$munENP*d$gubENP
d$localcomp2 <- (d$localcomp)^2
summary(d$localcomp)
violinegi <- read.dta13("homicidios_simbad.dta", convert.factors = TRUE)
d$horatesimbad <- (d$h*100000) / d$pob_total_est
d <- subset(d, idmun <= 570)
summary(d$idedomun)
summary(d$horatesimbad)
as_tibble(d$idedomun, d$NomMun)
head(d[,c("idedo","idedomun","NomMun","year", "h", "horatesimbad")], n = 30)
d$lag.hom <- c(NA, d$horatesimbad[-nrow(d)])
d$lag.hom[which(!duplicated(d$idedomun))] <- NA
head(d[,c("idedo","idedomun","NomMun","year", "h", "horatesimbad","lag.hom")], n = 40)
d$nonzero = 0
d$nonzero <- ifelse(d$homicidios > 0, 1, 0)
summary(d$nonzero)
d$ruralcorp = d$PRI_p6 * d$part6
summary(d[,c("ruralcorp", "PRI_p6", "part6")])
d$logpop = log(d$pob_total_est)
d$pop2 = d$pob_total_est^2
d$pop = d$pob_total_est
summary(d[, c("logpop", "pop2","pop")])
d$crisis = 0
d$crisis = ifelse(d$year == 1982, 1, 0)
d$crisis = ifelse(d$year == 1985, 1, 0)
d$crisis = ifelse(d$year == 1986, 1, 0)
d$crisis = ifelse(d$year == 1995, 1, 0)
d$crisis = ifelse(d$year == 2000, 1, 0)
d$crisis = ifelse(d$year == 2001, 1, 0)
d$crisis = ifelse(d$year == 2002, 1, 0)
d$crisis = ifelse(d$year == 2003, 1, 0)
d$crisis = ifelse(d$year == 2008, 1, 0)
d$crisis = ifelse(d$year == 2009, 1, 0)
d$crisis = ifelse(d$year == 2010, 1, 0)
save(d, file = 'Dframe.Rdata')
d$migpol = 0
d$migpol = ifelse(d$year >= 2004, 1, 0)
d <- subset(d, d$year >= 2000)
d <- rename(d, replace = c("IIM_vivrem" = "rem"))
d$remVf = ifelse(d$year ==2010,rem,.)
d$remVf = ifelse(d$year ==2010,d$rem,.)
d$remVf = ifelse(d$year ==2010,d$rem,0)
d$remVf = ifelse(d$year ==2010,d$rem,NA)
d$lnrem = ln(rem)
d$lnrem = log(rem)
d$lnrem = log(d$rem)
d <- rename(d, replace=c("IIM_viv_ret"="ret"))
d <- rename(d, replace = c("IIM_viv_emig"="emig"))
d <- rename(d, c("IIM_indice"=migindex))
d <- rename(d, replace = c("IIM_indice"=migindex))
d <- rename(d, replace = c("IIM_indice"="migindex"))
d$divrate = (d$pob_divorcios/d$pob_total_est)*100000
d$lndivrate = log(divrate)
d$lndivrate = log(d$divrate)
>>>>>>> e428ec7d7c66f2adaaa202b4e57a8244edf781f8
